/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DishService } from "../dish.service";
import { DishCreateInput } from "./DishCreateInput";
import { Dish } from "./Dish";
import { DishFindManyArgs } from "./DishFindManyArgs";
import { DishWhereUniqueInput } from "./DishWhereUniqueInput";
import { DishUpdateInput } from "./DishUpdateInput";
import { ImageFindManyArgs } from "../../image/base/ImageFindManyArgs";
import { Image } from "../../image/base/Image";
import { ImageWhereUniqueInput } from "../../image/base/ImageWhereUniqueInput";
import { VariantFindManyArgs } from "../../variant/base/VariantFindManyArgs";
import { Variant } from "../../variant/base/Variant";
import { VariantWhereUniqueInput } from "../../variant/base/VariantWhereUniqueInput";

export class DishControllerBase {
  constructor(protected readonly service: DishService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dish })
  async createDish(@common.Body() data: DishCreateInput): Promise<Dish> {
    return await this.service.createDish({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,
      },
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dish] })
  @ApiNestedQuery(DishFindManyArgs)
  async dishes(@common.Req() request: Request): Promise<Dish[]> {
    const args = plainToClass(DishFindManyArgs, request.query);
    return this.service.dishes({
      ...args,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dish })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dish(
    @common.Param() params: DishWhereUniqueInput
  ): Promise<Dish | null> {
    const result = await this.service.dish({
      where: params,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dish })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDish(
    @common.Param() params: DishWhereUniqueInput,
    @common.Body() data: DishUpdateInput
  ): Promise<Dish | null> {
    try {
      return await this.service.updateDish({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,
        },
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dish })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDish(
    @common.Param() params: DishWhereUniqueInput
  ): Promise<Dish | null> {
    try {
      return await this.service.deleteDish({
        where: params,
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/images")
  @ApiNestedQuery(ImageFindManyArgs)
  async findImages(
    @common.Req() request: Request,
    @common.Param() params: DishWhereUniqueInput
  ): Promise<Image[]> {
    const query = plainToClass(ImageFindManyArgs, request.query);
    const results = await this.service.findImages(params.id, {
      ...query,
      select: {
        createdAt: true,

        dish: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/images")
  async connectImages(
    @common.Param() params: DishWhereUniqueInput,
    @common.Body() body: ImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      images: {
        connect: body,
      },
    };
    await this.service.updateDish({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/images")
  async updateImages(
    @common.Param() params: DishWhereUniqueInput,
    @common.Body() body: ImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      images: {
        set: body,
      },
    };
    await this.service.updateDish({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/images")
  async disconnectImages(
    @common.Param() params: DishWhereUniqueInput,
    @common.Body() body: ImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      images: {
        disconnect: body,
      },
    };
    await this.service.updateDish({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/variants")
  @ApiNestedQuery(VariantFindManyArgs)
  async findVariants(
    @common.Req() request: Request,
    @common.Param() params: DishWhereUniqueInput
  ): Promise<Variant[]> {
    const query = plainToClass(VariantFindManyArgs, request.query);
    const results = await this.service.findVariants(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,

        dish: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/variants")
  async connectVariants(
    @common.Param() params: DishWhereUniqueInput,
    @common.Body() body: VariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      variants: {
        connect: body,
      },
    };
    await this.service.updateDish({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/variants")
  async updateVariants(
    @common.Param() params: DishWhereUniqueInput,
    @common.Body() body: VariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      variants: {
        set: body,
      },
    };
    await this.service.updateDish({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/variants")
  async disconnectVariants(
    @common.Param() params: DishWhereUniqueInput,
    @common.Body() body: VariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      variants: {
        disconnect: body,
      },
    };
    await this.service.updateDish({
      where: params,
      data,
      select: { id: true },
    });
  }
}
