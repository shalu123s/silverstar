/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Variant } from "./Variant";
import { VariantCountArgs } from "./VariantCountArgs";
import { VariantFindManyArgs } from "./VariantFindManyArgs";
import { VariantFindUniqueArgs } from "./VariantFindUniqueArgs";
import { CreateVariantArgs } from "./CreateVariantArgs";
import { UpdateVariantArgs } from "./UpdateVariantArgs";
import { DeleteVariantArgs } from "./DeleteVariantArgs";
import { Dish } from "../../dish/base/Dish";
import { VariantService } from "../variant.service";
@graphql.Resolver(() => Variant)
export class VariantResolverBase {
  constructor(protected readonly service: VariantService) {}

  async _variantsMeta(
    @graphql.Args() args: VariantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Variant])
  async variants(
    @graphql.Args() args: VariantFindManyArgs
  ): Promise<Variant[]> {
    return this.service.variants(args);
  }

  @graphql.Query(() => Variant, { nullable: true })
  async variant(
    @graphql.Args() args: VariantFindUniqueArgs
  ): Promise<Variant | null> {
    const result = await this.service.variant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Variant)
  async createVariant(
    @graphql.Args() args: CreateVariantArgs
  ): Promise<Variant> {
    return await this.service.createVariant({
      ...args,
      data: {
        ...args.data,

        dish: args.data.dish
          ? {
              connect: args.data.dish,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Variant)
  async updateVariant(
    @graphql.Args() args: UpdateVariantArgs
  ): Promise<Variant | null> {
    try {
      return await this.service.updateVariant({
        ...args,
        data: {
          ...args.data,

          dish: args.data.dish
            ? {
                connect: args.data.dish,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Variant)
  async deleteVariant(
    @graphql.Args() args: DeleteVariantArgs
  ): Promise<Variant | null> {
    try {
      return await this.service.deleteVariant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Dish, {
    nullable: true,
    name: "dish",
  })
  async getDish(@graphql.Parent() parent: Variant): Promise<Dish | null> {
    const result = await this.service.getDish(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
