/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VariantService } from "../variant.service";
import { VariantCreateInput } from "./VariantCreateInput";
import { Variant } from "./Variant";
import { VariantFindManyArgs } from "./VariantFindManyArgs";
import { VariantWhereUniqueInput } from "./VariantWhereUniqueInput";
import { VariantUpdateInput } from "./VariantUpdateInput";

export class VariantControllerBase {
  constructor(protected readonly service: VariantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Variant })
  async createVariant(
    @common.Body() data: VariantCreateInput
  ): Promise<Variant> {
    return await this.service.createVariant({
      data: {
        ...data,

        dish: data.dish
          ? {
              connect: data.dish,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,

        dish: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Variant] })
  @ApiNestedQuery(VariantFindManyArgs)
  async variants(@common.Req() request: Request): Promise<Variant[]> {
    const args = plainToClass(VariantFindManyArgs, request.query);
    return this.service.variants({
      ...args,
      select: {
        createdAt: true,
        description: true,

        dish: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Variant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async variant(
    @common.Param() params: VariantWhereUniqueInput
  ): Promise<Variant | null> {
    const result = await this.service.variant({
      where: params,
      select: {
        createdAt: true,
        description: true,

        dish: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Variant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVariant(
    @common.Param() params: VariantWhereUniqueInput,
    @common.Body() data: VariantUpdateInput
  ): Promise<Variant | null> {
    try {
      return await this.service.updateVariant({
        where: params,
        data: {
          ...data,

          dish: data.dish
            ? {
                connect: data.dish,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,

          dish: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Variant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVariant(
    @common.Param() params: VariantWhereUniqueInput
  ): Promise<Variant | null> {
    try {
      return await this.service.deleteVariant({
        where: params,
        select: {
          createdAt: true,
          description: true,

          dish: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
