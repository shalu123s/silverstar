/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Image as PrismaImage,
  Category as PrismaCategory,
  Dish as PrismaDish,
} from "@prisma/client";

export class ImageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ImageCountArgs, "select">): Promise<number> {
    return this.prisma.image.count(args);
  }

  async images<T extends Prisma.ImageFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageFindManyArgs>
  ): Promise<PrismaImage[]> {
    return this.prisma.image.findMany<Prisma.ImageFindManyArgs>(args);
  }
  async image<T extends Prisma.ImageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageFindUniqueArgs>
  ): Promise<PrismaImage | null> {
    return this.prisma.image.findUnique(args);
  }
  async createImage<T extends Prisma.ImageCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageCreateArgs>
  ): Promise<PrismaImage> {
    return this.prisma.image.create<T>(args);
  }
  async updateImage<T extends Prisma.ImageUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageUpdateArgs>
  ): Promise<PrismaImage> {
    return this.prisma.image.update<T>(args);
  }
  async deleteImage<T extends Prisma.ImageDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageDeleteArgs>
  ): Promise<PrismaImage> {
    return this.prisma.image.delete(args);
  }

  async findCategories(
    parentId: string,
    args: Prisma.CategoryFindManyArgs
  ): Promise<PrismaCategory[]> {
    return this.prisma.image
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .categories(args);
  }

  async getDish(parentId: string): Promise<PrismaDish | null> {
    return this.prisma.image
      .findUnique({
        where: { id: parentId },
      })
      .dish();
  }
}
